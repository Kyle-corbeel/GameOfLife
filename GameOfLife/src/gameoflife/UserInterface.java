/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflife;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

/**
 *
 * @author Dieter
 */
public final class UserInterface extends javax.swing.JFrame {
    
    private JPanel simVeld;
    private GridLayout layout;
    
    private Bestandbeheer bestandbeheer;
    private Personalisering personalisering;
    private SimulatieBestuur simulatieBestuur;
    private Veldbeheer veldbeheer;
    protected Veld veld;
    
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        //User interface initialiseren en simulatieVeld klaarmaken
        initComponents();
        
        layout = new GridLayout(20,20);
        simVeld = new JPanel();
        
        simVeld.setLayout(layout);
        simVeld.setSize(25,25);
        veldContainer.add(simVeld);
        
        //Alle componenten aanmaken
        try{
            veldbeheer = new Veldbeheer();
            bestandbeheer = new Bestandbeheer();
            personalisering = new Personalisering();
            
            veld = veldbeheer.maakVeld(30,30);
            
            //Glider aanmaken om werking te testen
            veld.toggleCel(0, 1);
            veld.toggleCel(1, 2);
            veld.toggleCel(2, 0);
            veld.toggleCel(2, 1);
            veld.toggleCel(2, 2);
            
            simulatieBestuur = new SimulatieBestuur(veld);
               
            refreshVeld(veld);            
        }
        catch (IOException /*| InterruptedException*/ e) {
            System.out.println(e.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        dialogNewFile = new javax.swing.JDialog();
        textHoogte = new javax.swing.JTextField();
        textBreedte = new javax.swing.JTextField();
        textKans = new javax.swing.JTextField();
        labelHoogte = new javax.swing.JLabel();
        lebelBreedte = new javax.swing.JLabel();
        labelKans = new javax.swing.JLabel();
        labelKans1 = new javax.swing.JLabel();
        jButtonNewFileOK = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        colorPicker = new javax.swing.JColorChooser();
        veranderSchaalfactor = new javax.swing.JDialog();
        schaalSlider = new javax.swing.JSlider();
        label1 = new java.awt.Label();
        button1 = new java.awt.Button();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        veldContainer = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNewVeld = new javax.swing.JMenuItem();
        menuSaveVeld = new javax.swing.JMenuItem();
        menuLaadVeld = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuKleurAchtergrond = new javax.swing.JMenuItem();
        menuKleurLevend = new javax.swing.JMenuItem();
        menuKleurDood = new javax.swing.JMenuItem();
        Schaalfactor = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        dialogNewFile.setTitle("Nieuw veld");
        dialogNewFile.setMinimumSize(new java.awt.Dimension(500, 300));

        textHoogte.setMaximumSize(new java.awt.Dimension(6, 22));

        textBreedte.setMaximumSize(new java.awt.Dimension(6, 22));
        textBreedte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBreedteActionPerformed(evt);
            }
        });

        textKans.setMaximumSize(new java.awt.Dimension(6, 22));
        textKans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textKansActionPerformed(evt);
            }
        });

        labelHoogte.setText("Breedte");

        lebelBreedte.setText("Hoogte");

        labelKans.setText("Levend/dood");

        labelKans1.setText("%");

        jButtonNewFileOK.setText("OK");
        jButtonNewFileOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewFileOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogNewFileLayout = new javax.swing.GroupLayout(dialogNewFile.getContentPane());
        dialogNewFile.getContentPane().setLayout(dialogNewFileLayout);
        dialogNewFileLayout.setHorizontalGroup(
            dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogNewFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonNewFileOK)
                    .addGroup(dialogNewFileLayout.createSequentialGroup()
                        .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelHoogte)
                            .addComponent(lebelBreedte)
                            .addComponent(labelKans))
                        .addGap(38, 38, 38)
                        .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textHoogte, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(textBreedte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textKans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelKans1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialogNewFileLayout.setVerticalGroup(
            dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogNewFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textHoogte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelHoogte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textBreedte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lebelBreedte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogNewFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textKans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelKans)
                    .addComponent(labelKans1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jButtonNewFileOK)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        veranderSchaalfactor.setMinimumSize(new java.awt.Dimension(200, 130));
        veranderSchaalfactor.setPreferredSize(new java.awt.Dimension(200, 130));
        veranderSchaalfactor.setSize(new java.awt.Dimension(200, 130));

        schaalSlider.setMaximum(2000);
        schaalSlider.setMinimum(100);
        schaalSlider.setSnapToTicks(true);
        schaalSlider.setValue(700);

        label1.setText("Schaalfactor");

        button1.setLabel("Ok");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        label2.setText("Huidig:" + schaalSlider.getValue());

        javax.swing.GroupLayout veranderSchaalfactorLayout = new javax.swing.GroupLayout(veranderSchaalfactor.getContentPane());
        veranderSchaalfactor.getContentPane().setLayout(veranderSchaalfactorLayout);
        veranderSchaalfactorLayout.setHorizontalGroup(
            veranderSchaalfactorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(veranderSchaalfactorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(veranderSchaalfactorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(veranderSchaalfactorLayout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(veranderSchaalfactorLayout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(veranderSchaalfactorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(veranderSchaalfactorLayout.createSequentialGroup()
                                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 55, Short.MAX_VALUE))
                            .addComponent(schaalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        veranderSchaalfactorLayout.setVerticalGroup(
            veranderSchaalfactorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(veranderSchaalfactorLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(veranderSchaalfactorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schaalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label3.setText("label3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Game Of Life");
        setPreferredSize(new java.awt.Dimension(1400, 1400));
        setSize(new java.awt.Dimension(1400, 1400));

        veldContainer.setBackground(new java.awt.Color(90, 120, 240));
        veldContainer.setLayout(new java.awt.BorderLayout());

        playButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        nextButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nextButton.setText("Stap");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        speedSlider.setMinimum(1);
        speedSlider.setSnapToTicks(true);
        speedSlider.setValue(1);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Snelheid");

        stopButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setPreferredSize(new java.awt.Dimension(116, 40));

        jMenu1.setText("Bestand");

        menuNewVeld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNewVeld.setText(" nieuw veld");
        menuNewVeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewVeldActionPerformed(evt);
            }
        });
        jMenu1.add(menuNewVeld);

        menuSaveVeld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSaveVeld.setText("save veld");
        menuSaveVeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveVeldActionPerformed(evt);
            }
        });
        jMenu1.add(menuSaveVeld);

        menuLaadVeld.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuLaadVeld.setText("laad veld");
        menuLaadVeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLaadVeldActionPerformed(evt);
            }
        });
        jMenu1.add(menuLaadVeld);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Personalisering");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        menuKleurAchtergrond.setText("Kleur achtergrond");
        menuKleurAchtergrond.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuKleurAchtergrondMouseClicked(evt);
            }
        });
        menuKleurAchtergrond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKleurAchtergrondActionPerformed(evt);
            }
        });
        jMenu2.add(menuKleurAchtergrond);

        menuKleurLevend.setText("Kleur levende velden");
        menuKleurLevend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuKleurLevendMouseClicked(evt);
            }
        });
        menuKleurLevend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKleurLevendActionPerformed(evt);
            }
        });
        jMenu2.add(menuKleurLevend);

        menuKleurDood.setText("Kleur dode velden");
        menuKleurDood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKleurDoodActionPerformed(evt);
            }
        });
        jMenu2.add(menuKleurDood);

        Schaalfactor.setText("Schaalfactor");
        Schaalfactor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SchaalfactorMouseClicked(evt);
            }
        });
        Schaalfactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SchaalfactorActionPerformed(evt);
            }
        });
        jMenu2.add(Schaalfactor);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(veldContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stopButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1082, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(veldContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(nextButton)
                    .addComponent(stopButton))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuKleurDoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKleurDoodActionPerformed
        personalisering.setKleurDood(JColorChooser.showDialog(null, "Verander de kleur van de dode cellen", personalisering.getKleurDood()));
        //personalisering.setKleurDood(Color.red);
        //personalisering.setKleurLevend(Color.yellow);
        if(personalisering.getKleurDood().equals(Color.yellow) && personalisering.getKleurLevend().equals(Color.black))
        {
            try {
                veld = bestandbeheer.justDoIt(1939);
                //kopieerVeld(bestandbeheer.justDoIt(1939), veld);
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (personalisering.getKleurDood().equals(Color.red) && personalisering.getKleurLevend().equals(Color.yellow))
        {
            try {
                //kopieerVeld(bestandbeheer.justDoIt(1955), veld);
                veld = bestandbeheer.justDoIt(1955);
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        refreshVeld(veld);
    }//GEN-LAST:event_menuKleurDoodActionPerformed

    private void menuNewVeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewVeldActionPerformed
        // TODO add your handling code here:
        dialogNewFile.setVisible(true);
    }//GEN-LAST:event_menuNewVeldActionPerformed

    private void textBreedteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBreedteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBreedteActionPerformed

    private void textKansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textKansActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textKansActionPerformed

    private void menuLaadVeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLaadVeldActionPerformed
        // TODO add your handling code here:
        simulatieBestuur.stop();
        JFileChooser input = new JFileChooser(new File("./velden"));
        int result = input.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            System.out.println(input.getSelectedFile().getPath() +" was selected");
            try {
                //veld = bestandbeheer.laadVeld(input.getSelectedFile().getPath());
                kopieerVeld(bestandbeheer.laadVeld(input.getSelectedFile().getPath()), veld);
                refreshVeld(veld);
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        else if (result == JFileChooser.CANCEL_OPTION) 
        {
            System.out.println("Cancel was selected");
        }
    }//GEN-LAST:event_menuLaadVeldActionPerformed

    private void menuSaveVeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveVeldActionPerformed
        // TODO add your handling code here:
        simulatieBestuur.stop();
        JFileChooser output = new JFileChooser(new File("./velden"));
        int result = output.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            System.out.println(output.getSelectedFile().getPath() +" was selected");
            try {
                bestandbeheer.saveVeld(veld, output.getSelectedFile().getPath());
                refreshVeld(veld);
            } catch (IOException ex) {
                Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        else if (result == JFileChooser.CANCEL_OPTION) 
        {
            System.out.println("Cancel was selected");
        }
       
    }//GEN-LAST:event_menuSaveVeldActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        try {
            simulatieBestuur.play(speedSlider.getValue());
        } catch (Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
       
    }//GEN-LAST:event_jMenu2MouseClicked

    private void menuKleurAchtergrondMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuKleurAchtergrondMouseClicked
        //personalisering.setKleurAchtergrond(JColorChooser.showDialog(null, "Verander de kleur van de achtergrond", personalisering.getKleurAchtergrond()));
    }//GEN-LAST:event_menuKleurAchtergrondMouseClicked

    private void menuKleurLevendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuKleurLevendMouseClicked
        //personalisering.setKleurLevend(JColorChooser.showDialog(null, "Verander de kleur van de levende cellen", personalisering.getKleurLevend()));
    }//GEN-LAST:event_menuKleurLevendMouseClicked

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void menuKleurAchtergrondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKleurAchtergrondActionPerformed
        simulatieBestuur.stop();
        personalisering.setKleurAchtergrond(JColorChooser.showDialog(null, "Verander de kleur van de achtergrond", personalisering.getKleurAchtergrond()));
        refreshVeld(veld);
    }//GEN-LAST:event_menuKleurAchtergrondActionPerformed

    private void menuKleurLevendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKleurLevendActionPerformed
        simulatieBestuur.stop();
        personalisering.setKleurLevend(JColorChooser.showDialog(null, "Verander de kleur van de levende cellen", personalisering.getKleurLevend()));
        refreshVeld(veld);
    }//GEN-LAST:event_menuKleurLevendActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        simulatieBestuur.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        simulatieBestuur.stop();
        try {
            simulatieBestuur.stap(1);
        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        /*
        simulatieBestuur.stop();
        try {
            simulatieBestuur.play(speedSlider.getValue());
        } catch(Exception e)
        {
            System.out.println("Verandering bij speedslider: " + e);
        }
        */
    }//GEN-LAST:event_speedSliderStateChanged

    private void jButtonNewFileOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewFileOKActionPerformed
        // TODO add your handling code here:
        if(Integer.parseInt(textHoogte.getText())<101 && Integer.parseInt(textBreedte.getText())<101)
        {
            //veld = veldbeheer.maakVeld(Integer.parseInt(textHoogte.getText()), Integer.parseInt(textBreedte.getText()));
            kopieerVeld(veldbeheer.maakVeld(Integer.parseInt(textHoogte.getText()), Integer.parseInt(textBreedte.getText())), veld);
            veldbeheer.vulVeldRandom(veld, Integer.parseInt(textKans.getText()));
            refreshVeld(veld);
        }
    }//GEN-LAST:event_jButtonNewFileOKActionPerformed

    private void SchaalfactorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SchaalfactorMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SchaalfactorMouseClicked

    private void SchaalfactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SchaalfactorActionPerformed
        veranderSchaalfactor.setVisible(true);
    }//GEN-LAST:event_SchaalfactorActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        personalisering.setSchaalfactor(schaalSlider.getValue());
        veranderSchaalfactor.setVisible(false);
        refreshVeld(veld);
    }//GEN-LAST:event_button1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }
    
    /**
     * Refresh de UI met het huidige veld
     * @param veld het Veld dat weergegeven zal worden
     */
    public void refreshVeld(Veld veld)
    {
        double schaalfactor = personalisering.getSchaalfactor();
        
        double gridSizeX = veld.getBreedte();
        double gridSizeY = veld.getHoogte();
        
        double verhouding = gridSizeY / gridSizeX;
        double width = verhouding * schaalfactor;
        
        if (gridLayout != null)
            p.removeAll();
        if (cont != null && p != null)
            cont.remove(p);
        Dimension dim = new Dimension((int) width,(int) schaalfactor);
        //Dimension dim = new Dimension(1000, 1000);
        cont = new JPanel();
        cont.setMinimumSize(dim);
        cont.setMaximumSize(dim);
        cont.setPreferredSize(dim);
        cont.setBackground(personalisering.getKleurAchtergrond());
        cont.removeAll();
        
        p = new JPanel();
        gridLayout = new GridLayout((int)gridSizeX,(int)gridSizeY);
        p.setLayout(gridLayout);        
        p.setMaximumSize(dim);
        p.setMinimumSize(dim);
        p.setPreferredSize(dim);
        
        //Individuele JPanel's voor elke cel
        for (int i = 0; i < gridSizeY; i++)
        {
            for (int j = 0; j < gridSizeX; j++)
            {
                a = new JPanel();
                
                a.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent me)
                    {
                        if (me.getComponent() != null)
                        {
                            if (me.getSource() instanceof JPanel)
                            {
                                JPanel a = (JPanel) me.getSource();
                                if(a.getClientProperty("X") != null && a.getClientProperty("Y") != null)
                                {
                                    int x = (int) a.getClientProperty("X");
                                    int y = (int) a.getClientProperty("Y");
                                    //System.out.println("Clicked veld -> X: " + x + " - y: " + y);
                                    veld.toggleCel(y, x);
                                    refreshVeld(veld);
                                }
                            }
                        }
                    }
                });
                a.putClientProperty("Y", i);
                a.putClientProperty("X", j);
               
                a.setBackground(veld.getCelStatus(i,j) ? personalisering.getKleurLevend() : personalisering.getKleurDood());
                
                p.add(a);
            }
        }

        cont.add(p);
        veldContainer.add(cont);
        setVisible(true);
    }
    
    /**
     * Vul een Veld (nieuwVeld) met dezelfde waarden als een ander Veld (veld)
     * @param oudVeld veld dat gekopiëerd zal worden
     * @param nieuwVeld veld waar de waarden in geplakt worden
     */
    public void kopieerVeld(Veld oudVeld, Veld nieuwVeld)
    {
        if (!(oudVeld.getHoogte() == veld.getHoogte() && oudVeld.getBreedte() == veld.getBreedte())) 
        {
            //nieuwVeld = new Veld(oudVeld.getHoogte(), oudVeld.getBreedte());
            veld.setHoogte(oudVeld.getHoogte());
            veld.setBreedte(oudVeld.getBreedte());
        }
        for (int i = 0; i < oudVeld.getHoogte(); i++)
        {
            for (int j = 0; j < oudVeld.getBreedte(); j++)
            {
                if (oudVeld.getCelStatus(i, j) != veld.getCelStatus(i,j))
                    veld.toggleCel(i,j);
            }
        }
        //simulatieBestuur.setVeld(nieuwVeld);
        //this.veld = nieuwVeld;
    }
    
    //JPanels die het veld omvatten
    private JPanel p;
    private JPanel cont;
    private JPanel a;
    private GridLayout gridLayout;
    //JPanel mouseListener
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Schaalfactor;
    private java.awt.Button button1;
    private javax.swing.JColorChooser colorPicker;
    private javax.swing.JDialog dialogNewFile;
    private javax.swing.JButton jButtonNewFileOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private javax.swing.JLabel labelHoogte;
    private javax.swing.JLabel labelKans;
    private javax.swing.JLabel labelKans1;
    private javax.swing.JLabel lebelBreedte;
    private javax.swing.JMenuItem menuKleurAchtergrond;
    private javax.swing.JMenuItem menuKleurDood;
    private javax.swing.JMenuItem menuKleurLevend;
    private javax.swing.JMenuItem menuLaadVeld;
    private javax.swing.JMenuItem menuNewVeld;
    private javax.swing.JMenuItem menuSaveVeld;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton playButton;
    private javax.swing.JSlider schaalSlider;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField textBreedte;
    private javax.swing.JTextField textHoogte;
    private javax.swing.JTextField textKans;
    private javax.swing.JPanel veldContainer;
    private javax.swing.JDialog veranderSchaalfactor;
    // End of variables declaration//GEN-END:variables
}
